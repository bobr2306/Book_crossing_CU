from flask import Flask
from flask_cors import CORS
from src.database.database import init_db, get_db
from src.routes.users import users_routes
from src.routes.books import books_routes
from src.routes.collections import collections_routes
from src.routes.transactions import transactions_routes
from src.database.commands import register_commands
from src.database.crud import create_user, create_book, create_transaction
from src.auth_utils import hash_password
from src.database.models import User
app = Flask(__name__)
CORS(app, supports_credentials=True, origins=["http://localhost:3000", "http://localhost:5173"])

init_db()

# ‚ùóÔ∏è –î–æ–±–∞–≤–∏–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
try:
    with get_db() as db:
        if not db.query(User).filter_by(username="admin").first():
            users = [
                {"username": "admin", "password": hash_password("admin123"), "role": "admin"},
                {"username": "user1", "password": hash_password("user123"), "role": "user"},
                {"username": "user2", "password": hash_password("user123"), "role": "user"}
            ]
            for user_data in users:
                create_user(db, user_data)
            books = [
                {"title": "–í–æ–π–Ω–∞ –∏ –º–∏—Ä", "author": "–õ–µ–≤ –¢–æ–ª—Å—Ç–æ–π", "user_id": 1, "category": "–ö–ª–∞—Å—Å–∏–∫–∞"},
                {"title": "1984", "author": "–î–∂–æ—Ä–¥–∂ –û—Ä—É—ç–ª–ª", "user_id": 2, "category": "–ê–Ω—Ç–∏—É—Ç–æ–ø–∏—è"},
                {"title": "–ú–∞—Å—Ç–µ—Ä –∏ –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞", "author": "–ú–∏—Ö–∞–∏–ª –ë—É–ª–≥–∞–∫–æ–≤", "user_id": 2, "category": "–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞"}
            ]
            for book_data in books:
                create_book(db, book_data)

            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –æ–±–º–µ–Ω—ã
            transactions = [
                {
                    "from_user_id": 1,  # admin
                    "to_user_id": 2,    # user1
                    "book_id": 1,       # –í–æ–π–Ω–∞ –∏ –º–∏—Ä
                    "place": "–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ ‚Ññ1",
                    "status": "pending"
                },
                {
                    "from_user_id": 2,  # user1
                    "to_user_id": 1,    # admin
                    "book_id": 2,       # 1984
                    "place": "–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ ‚Ññ2",
                    "status": "accepted"
                },
                {
                    "from_user_id": 1,  # admin
                    "to_user_id": 3,    # user2
                    "book_id": 3,       # –ú–∞—Å—Ç–µ—Ä –∏ –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞
                    "place": "–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ ‚Ññ3",
                    "status": "in_progress"
                },
                {
                    "from_user_id": 3,  # user2
                    "to_user_id": 1,    # admin
                    "book_id": 1,       # –í–æ–π–Ω–∞ –∏ –º–∏—Ä
                    "place": "–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ ‚Ññ1",
                    "status": "completed"
                },
                {
                    "from_user_id": 1,  # admin
                    "to_user_id": 2,    # user1
                    "book_id": 2,       # 1984
                    "place": "–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ ‚Ññ2",
                    "status": "rejected"
                }
            ]
            for transaction_data in transactions:
                create_transaction(db, transaction_data)

            print("üü¢ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
        else:
            print("‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 'admin' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–∏–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

# –º–∞—Ä—à—Ä—É—Ç—ã –∏ –∫–æ–º–∞–Ω–¥—ã
users_routes(app)
books_routes(app)
collections_routes(app)
transactions_routes(app)
register_commands(app)

if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0', port=5000)
